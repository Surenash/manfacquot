from rest_framework import serializers
from .models import Design, DesignStatus
from accounts.models import UserRole # To validate user role if needed

class DesignSerializer(serializers.ModelSerializer):
    # customer = serializers.PrimaryKeyRelatedField(read_only=True) # Or SlugRelatedField for username
    customer_email = serializers.EmailField(source='customer.email', read_only=True)
    status_display = serializers.CharField(source='get_status_display', read_only=True)

    class Meta:
        model = Design
        fields = [
            'id',
            'customer', # FK, writeable for association, but usually set from request.user
            'customer_email', # Read-only display
            'design_name',
            's3_file_key',
            'material',
            'quantity',
            'status',         # Writeable for admin/internal updates if needed, otherwise read_only post-creation
            'status_display', # Read-only display
            'geometric_data', # Typically read-only, populated by backend analysis
            'created_at',
            'updated_at'
        ]
        read_only_fields = [
            'id', 'customer_email', 'status_display',
            'geometric_data', 'created_at', 'updated_at'
        ]
        # 'status' could also be read_only if it's only set by backend processes post-creation.
        # 'customer' is often set implicitly from request.user, not from request.data directly by user.

    def validate_customer(self, value):
        """
        Ensure the customer has the 'customer' role.
        This validation is good if 'customer' field is part of request data.
        If set from request.user, this specific validation might be redundant here
        but good for direct serializer usage.
        """
        if value.role != UserRole.CUSTOMER:
            raise serializers.ValidationError("Only users with the 'customer' role can own designs.")
        return value

    def validate_s3_file_key(self, value):
        """
        Basic validation for s3_file_key.
        Can be expanded to check format or if it belongs to the user's "folder" on S3.
        """
        if not value or len(value.strip()) == 0:
            raise serializers.ValidationError("s3_file_key cannot be empty.")
        # Example: check if it starts with the expected prefix pattern
        # from django.conf import settings
        # expected_prefix = f"{settings.AWS_S3_DESIGNS_UPLOAD_PREFIX.strip('/')}/{self.context['request'].user.id}/"
        # if not value.startswith(expected_prefix):
        #     raise serializers.ValidationError("Invalid s3_file_key format or prefix mismatch.")
        return value

    def create(self, validated_data):
        """
        Override create to set customer from the request context if not provided,
        and to ensure status is 'pending_analysis' on creation.
        """
        # Set customer from the currently authenticated user making the request
        # This assumes 'request' is in the serializer context
        if 'request' in self.context and not validated_data.get('customer'):
            validated_data['customer'] = self.context['request'].user

        # Ensure the user being associated is indeed a customer
        # (even if set from context, double check role)
        user = validated_data.get('customer')
        if user and user.role != UserRole.CUSTOMER:
             raise serializers.ValidationError({
                 "customer": "Designs can only be associated with users having the 'customer' role."
             })

        # Set initial status
        validated_data['status'] = DesignStatus.PENDING_ANALYSIS

        # Geometric data should not be settable at creation via this serializer by client
        validated_data.pop('geometric_data', None)

        return super().create(validated_data)

class DesignCreateSerializer(serializers.ModelSerializer):
    """
    Serializer specifically for creating a new Design record after file upload.
    The client provides s3Key, designName, material, quantity.
    Customer is set from the authenticated user.
    Status defaults to 'pending_analysis'.
    """
    class Meta:
        model = Design
        fields = [
            'id', # Add id to be included in the response after creation
            'design_name',
            's3_file_key',
            'material',
            'quantity',
        ]
        read_only_fields = ['id'] # id is read-only, generated by the backend
        # s3_file_key is provided by the client after successful S3 upload.

    def validate_s3_file_key(self, value):
        if not value or len(value.strip()) == 0:
            raise serializers.ValidationError("s3_file_key cannot be empty and must be provided.")

        request = self.context.get('request')
        if not request or not hasattr(request, 'user') or not request.user.is_authenticated:
            # This case should ideally be caught by view permissions, but defensive check here.
            raise serializers.ValidationError("User context is not available for s3_file_key validation.")

        from django.conf import settings # Import settings locally
        user = request.user
        expected_prefix = f"{settings.AWS_S3_DESIGNS_UPLOAD_PREFIX.strip('/')}/{user.id}/"

        if not value.startswith(expected_prefix):
            raise serializers.ValidationError(
                f"Invalid s3_file_key. Key does not match expected path for user. Expected prefix: '{expected_prefix}'"
            )

        # Further validation: ensure the part after user.id is a UUID (from DesignUploadURLView)
        # Example key: "uploads/designs/user_id/uuid.extension"
        try:
            key_without_prefix = value[len(expected_prefix):]
            uuid_part = key_without_prefix.split('.')[0]
            import uuid # Import uuid locally
            uuid.UUID(uuid_part, version=4)
        except (ValueError, IndexError) as e:
            raise serializers.ValidationError(
                f"Invalid s3_file_key structure. Expected 'prefix/{{user_id}}/{{uuid}}.extension'. Error: {e}"
            )

        return value

    def create(self, validated_data):
        user = self.context['request'].user
        if user.role != UserRole.CUSTOMER:
            raise serializers.ValidationError("Only customers can create designs.")

        design = Design.objects.create(
            customer=user,
            status=DesignStatus.PENDING_ANALYSIS, # Default status
            **validated_data
        )

        # Trigger Celery task for CAD analysis
        from .tasks import analyze_cad_file # Import task here to avoid circular dependency issues at module level
        analyze_cad_file.delay(design.id)

        return design
